// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::deno_async::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.2.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -867403329;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__deno_async__deno_async_add_module_code_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<String>,
    is_main: impl CstDecode<bool>,
    evaluate: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_add_module_code",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            let api_is_main = is_main.cst_decode();
            let api_evaluate = evaluate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_add_module_code(
                        &*api_wrapper_guard,
                        api_module_name,
                        api_module_code,
                        api_is_main,
                        api_evaluate,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_call_function_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module: impl CstDecode<Option<(usize, String)>>,
    function: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_call_function",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module = module.cst_decode();
            let api_function = function.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_call_function(
                        &*api_wrapper_guard,
                        api_module,
                        api_function,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let output_ok = crate::api::deno_async::deno_async_create()?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_dispose_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_dispose",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok =
                        crate::api::deno_async::deno_async_dispose(&*api_wrapper_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_eval_module_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_id: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_eval_module",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_id = module_id.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_eval_module(
                        &*api_wrapper_guard,
                        api_module_id,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_get_memory_usage_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_get_memory_usage",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok =
                        crate::api::deno_async::deno_async_get_memory_usage(&*api_wrapper_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_interrupt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_interrupt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok =
                        crate::api::deno_async::deno_async_interrupt(&*api_wrapper_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_listen_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    events: impl CstDecode<
        StreamSink<
            crate::api::deno_commons::DenoCustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_listen",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_events = events.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok =
                        crate::api::deno_async::deno_async_listen(&*api_wrapper_guard, api_events)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_set_sys_module_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<Option<String>>,
    evaluate: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_set_sys_module",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            let api_evaluate = evaluate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_set_sys_module(
                        &*api_wrapper_guard,
                        api_module_name,
                        api_module_code,
                        api_evaluate,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_snapshot_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_snapshot",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let output_ok = crate::api::deno_async::deno_async_snapshot(
                        api_module_name,
                        api_module_code,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_sys_to_js_binary_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_sys_to_js_binary",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_sys_to_js_binary(
                        &*api_wrapper_guard,
                        api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_async_sys_to_js_json_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    data: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_async_sys_to_js_json",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::deno_async::deno_async_sys_to_js_json(
                        &*api_wrapper_guard,
                        api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_get_snapshot_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_get_snapshot",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::deno_async::deno_get_snapshot())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_remove_snapshot_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_remove_snapshot",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::deno_async::deno_remove_snapshot();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_set_snapshot_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    snapshot: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_set_snapshot",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_snapshot = snapshot.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::deno_async::deno_set_snapshot(api_snapshot);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__deno_async__deno_sync_eval_code_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    code: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "deno_sync_eval_code",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_code = code.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok =
                        crate::api::deno_async::deno_sync_eval_code(&*api_wrapper_guard, api_code)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__minimal__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::minimal::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_add_module_bytecode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_bytecode: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_add_module_bytecode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_bytecode = module_bytecode.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok =
                            crate::api::quickjs_async::quickjs_async_add_module_bytecode(
                                &*api_wrapper_guard,
                                api_module_name,
                                api_module_bytecode,
                            )
                            .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_add_module_code_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_add_module_code",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_add_module_code(
                            &*api_wrapper_guard,
                            api_module_name,
                            api_module_code,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_compile_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_compile",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_compile(
                            &*api_wrapper_guard,
                            api_module_name,
                            api_module_code,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    memory_limit: impl CstDecode<Option<usize>>,
    max_stack_size: impl CstDecode<Option<usize>>,
    enable_interrupt: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_memory_limit = memory_limit.cst_decode();
            let api_max_stack_size = max_stack_size.cst_decode();
            let api_enable_interrupt = enable_interrupt.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let output_ok = crate::api::quickjs_async::quickjs_async_create(
                            api_memory_limit,
                            api_max_stack_size,
                            api_enable_interrupt,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_dispose_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_dispose",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok =
                            crate::api::quickjs_async::quickjs_async_dispose(&*api_wrapper_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_eval_code_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    code: impl CstDecode<String>,
    backtrace_barrier: impl CstDecode<bool>,
    global: impl CstDecode<bool>,
    promise: impl CstDecode<bool>,
    strict: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_eval_code",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_code = code.cst_decode();
            let api_backtrace_barrier = backtrace_barrier.cst_decode();
            let api_global = global.cst_decode();
            let api_promise = promise.cst_decode();
            let api_strict = strict.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_eval_code(
                            &*api_wrapper_guard,
                            api_code,
                            api_backtrace_barrier,
                            api_global,
                            api_promise,
                            api_strict,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_eval_module_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_bytes: impl CstDecode<Vec<u8>>,
    module_name: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_eval_module",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_bytes = module_bytes.cst_decode();
            let api_module_name = module_name.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_eval_module(
                            &*api_wrapper_guard,
                            api_module_bytes,
                            api_module_name,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_execute_idle_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_execute_idle",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_execute_idle(
                            &*api_wrapper_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_execute_pending_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_execute_pending",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_execute_pending(
                            &*api_wrapper_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_get_memory_usage_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_get_memory_usage",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_get_memory_usage(
                            &*api_wrapper_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_interrupt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_interrupt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok =
                            crate::api::quickjs_async::quickjs_async_interrupt(&*api_wrapper_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_is_pending_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_is_pending",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_is_pending(
                            &*api_wrapper_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_listen_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    events: impl CstDecode<
        StreamSink<
            crate::api::quickjs_commons::CustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_listen",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_events = events.cst_decode();
            move |context| {
                transform_result_dco::<_, _, String>((move || {
                    let mut api_wrapper_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_wrapper,
                                0,
                                false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_wrapper_guard = Some(api_wrapper.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_wrapper_guard = api_wrapper_guard.unwrap();
                    let output_ok = crate::api::quickjs_async::quickjs_async_listen(
                        &*api_wrapper_guard,
                        api_events,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_set_global_value_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    name: impl CstDecode<String>,
    value: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_set_global_value",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_name = name.cst_decode();
            let api_value = value.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_set_global_value(
                            &*api_wrapper_guard,
                            api_name,
                            api_value,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_set_sys_module_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    module_code: impl CstDecode<Option<String>>,
    module_bytecode: impl CstDecode<Option<Vec<u8>>>,
    js_to_sys_name: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_set_sys_module",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_module_code = module_code.cst_decode();
            let api_module_bytecode = module_bytecode.cst_decode();
            let api_js_to_sys_name = js_to_sys_name.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_set_sys_module(
                            &*api_wrapper_guard,
                            api_module_name,
                            api_module_code,
                            api_module_bytecode,
                            api_js_to_sys_name,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_sys_to_js_binary_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    trigger_name: impl CstDecode<String>,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_sys_to_js_binary",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_trigger_name = trigger_name.cst_decode();
            let api_data = data.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_sys_to_js_binary(
                            &*api_wrapper_guard,
                            api_module_name,
                            api_trigger_name,
                            api_data,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__quickjs_async__quickjs_async_sys_to_js_json_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    wrapper: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
    >,
    module_name: impl CstDecode<String>,
    trigger_name: impl CstDecode<String>,
    data: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "quickjs_async_sys_to_js_json",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_wrapper = wrapper.cst_decode();
            let api_module_name = module_name.cst_decode();
            let api_trigger_name = trigger_name.cst_decode();
            let api_data = data.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let mut api_wrapper_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_wrapper,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_wrapper_guard =
                                        Some(api_wrapper.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_wrapper_guard = api_wrapper_guard.unwrap();
                        let output_ok = crate::api::quickjs_async::quickjs_async_sys_to_js_json(
                            &*api_wrapper_guard,
                            api_module_name,
                            api_trigger_name,
                            api_data,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Arc<Wrapper> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<
        crate::api::quickjs_commons::CustomData,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::deno_commons::DenoCustomData,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::quickjs_commons::CustomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_binary = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_json = <Option<String>>::sse_decode(deserializer);
        return crate::api::quickjs_commons::CustomData {
            binary: var_binary,
            json: var_json,
        };
    }
}

impl SseDecode for crate::api::quickjs_commons::CustomMemoryUsage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mallocSize = <i64>::sse_decode(deserializer);
        let mut var_memoryUsedSize = <i64>::sse_decode(deserializer);
        let mut var_countInterruptCalls = <u64>::sse_decode(deserializer);
        return crate::api::quickjs_commons::CustomMemoryUsage {
            malloc_size: var_mallocSize,
            memory_used_size: var_memoryUsedSize,
            count_interrupt_calls: var_countInterruptCalls,
        };
    }
}

impl SseDecode for crate::api::deno_commons::DenoCustomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_binary = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_json = <Option<String>>::sse_decode(deserializer);
        return crate::api::deno_commons::DenoCustomData {
            binary: var_binary,
            json: var_json,
        };
    }
}

impl SseDecode for crate::api::deno_commons::DenoMemoryUsage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_totalAvailableSize = <usize>::sse_decode(deserializer);
        let mut var_totalPhysicalSize = <usize>::sse_decode(deserializer);
        let mut var_totalHeapSize = <usize>::sse_decode(deserializer);
        let mut var_usedHeapSize = <usize>::sse_decode(deserializer);
        let mut var_externalMemory = <usize>::sse_decode(deserializer);
        return crate::api::deno_commons::DenoMemoryUsage {
            total_available_size: var_totalAvailableSize,
            total_physical_size: var_totalPhysicalSize,
            total_heap_size: var_totalHeapSize,
            used_heap_size: var_usedHeapSize,
            external_memory: var_externalMemory,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(usize, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<(usize, String)>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for (usize, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <usize>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Arc<Wrapper>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Arc<Wrapper>> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Arc<Wrapper>>> for Arc<Wrapper> {
    fn into_into_dart(self) -> FrbWrapper<Arc<Wrapper>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::quickjs_commons::CustomData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.binary.into_into_dart().into_dart(),
            self.json.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quickjs_commons::CustomData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::quickjs_commons::CustomData>
    for crate::api::quickjs_commons::CustomData
{
    fn into_into_dart(self) -> crate::api::quickjs_commons::CustomData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::quickjs_commons::CustomMemoryUsage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.malloc_size.into_into_dart().into_dart(),
            self.memory_used_size.into_into_dart().into_dart(),
            self.count_interrupt_calls.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::quickjs_commons::CustomMemoryUsage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::quickjs_commons::CustomMemoryUsage>
    for crate::api::quickjs_commons::CustomMemoryUsage
{
    fn into_into_dart(self) -> crate::api::quickjs_commons::CustomMemoryUsage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::deno_commons::DenoCustomData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.binary.into_into_dart().into_dart(),
            self.json.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::deno_commons::DenoCustomData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::deno_commons::DenoCustomData>
    for crate::api::deno_commons::DenoCustomData
{
    fn into_into_dart(self) -> crate::api::deno_commons::DenoCustomData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::deno_commons::DenoMemoryUsage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_available_size.into_into_dart().into_dart(),
            self.total_physical_size.into_into_dart().into_dart(),
            self.total_heap_size.into_into_dart().into_dart(),
            self.used_heap_size.into_into_dart().into_dart(),
            self.external_memory.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::deno_commons::DenoMemoryUsage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::deno_commons::DenoMemoryUsage>
    for crate::api::deno_commons::DenoMemoryUsage
{
    fn into_into_dart(self) -> crate::api::deno_commons::DenoMemoryUsage {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Arc<Wrapper> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Wrapper >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::api::quickjs_commons::CustomData,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        crate::api::deno_commons::DenoCustomData,
        flutter_rust_bridge::for_generated::DcoCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::quickjs_commons::CustomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<u8>>>::sse_encode(self.binary, serializer);
        <Option<String>>::sse_encode(self.json, serializer);
    }
}

impl SseEncode for crate::api::quickjs_commons::CustomMemoryUsage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.malloc_size, serializer);
        <i64>::sse_encode(self.memory_used_size, serializer);
        <u64>::sse_encode(self.count_interrupt_calls, serializer);
    }
}

impl SseEncode for crate::api::deno_commons::DenoCustomData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<u8>>>::sse_encode(self.binary, serializer);
        <Option<String>>::sse_encode(self.json, serializer);
    }
}

impl SseEncode for crate::api::deno_commons::DenoMemoryUsage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.total_available_size, serializer);
        <usize>::sse_encode(self.total_physical_size, serializer);
        <usize>::sse_encode(self.total_heap_size, serializer);
        <usize>::sse_encode(self.used_heap_size, serializer);
        <usize>::sse_encode(self.external_memory, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<(usize, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <(usize, String)>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (usize, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.2.0.

    // Section: imports

    use super::*;
    use crate::api::deno_async::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<Arc<Wrapper>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Arc<Wrapper> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::quickjs_commons::CustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::quickjs_commons::CustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::deno_commons::DenoCustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::deno_commons::DenoCustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<bool> for *mut bool {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<(usize, String)> for *mut wire_cst_record_usize_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (usize, String) {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<(usize, String)>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<usize> for *mut usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::quickjs_commons::CustomData> for wire_cst_custom_data {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::quickjs_commons::CustomData {
            crate::api::quickjs_commons::CustomData {
                binary: self.binary.cst_decode(),
                json: self.json.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::quickjs_commons::CustomMemoryUsage> for wire_cst_custom_memory_usage {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::quickjs_commons::CustomMemoryUsage {
            crate::api::quickjs_commons::CustomMemoryUsage {
                malloc_size: self.malloc_size.cst_decode(),
                memory_used_size: self.memory_used_size.cst_decode(),
                count_interrupt_calls: self.count_interrupt_calls.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::deno_commons::DenoCustomData> for wire_cst_deno_custom_data {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::deno_commons::DenoCustomData {
            crate::api::deno_commons::DenoCustomData {
                binary: self.binary.cst_decode(),
                json: self.json.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::deno_commons::DenoMemoryUsage> for wire_cst_deno_memory_usage {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::deno_commons::DenoMemoryUsage {
            crate::api::deno_commons::DenoMemoryUsage {
                total_available_size: self.total_available_size.cst_decode(),
                total_physical_size: self.total_physical_size.cst_decode(),
                total_heap_size: self.total_heap_size.cst_decode(),
                used_heap_size: self.used_heap_size.cst_decode(),
                external_memory: self.external_memory.cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<(usize, String)> for wire_cst_record_usize_string {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (usize, String) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl NewWithNullPtr for wire_cst_custom_data {
        fn new_with_null_ptr() -> Self {
            Self {
                binary: core::ptr::null_mut(),
                json: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_custom_data {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_custom_memory_usage {
        fn new_with_null_ptr() -> Self {
            Self {
                malloc_size: Default::default(),
                memory_used_size: Default::default(),
                count_interrupt_calls: Default::default(),
            }
        }
    }
    impl Default for wire_cst_custom_memory_usage {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_deno_custom_data {
        fn new_with_null_ptr() -> Self {
            Self {
                binary: core::ptr::null_mut(),
                json: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_deno_custom_data {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_deno_memory_usage {
        fn new_with_null_ptr() -> Self {
            Self {
                total_available_size: Default::default(),
                total_physical_size: Default::default(),
                total_heap_size: Default::default(),
                used_heap_size: Default::default(),
                external_memory: Default::default(),
            }
        }
    }
    impl Default for wire_cst_deno_memory_usage {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_usize_string {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_usize_string {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_add_module_code(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
        is_main: bool,
        evaluate: bool,
    ) {
        wire__crate__api__deno_async__deno_async_add_module_code_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            is_main,
            evaluate,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_call_function(
        port_: i64,
        wrapper: usize,
        module: *mut wire_cst_record_usize_string,
        function: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__deno_async__deno_async_call_function_impl(
            port_, wrapper, module, function,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_create(
        port_: i64,
    ) {
        wire__crate__api__deno_async__deno_async_create_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_dispose(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__deno_async__deno_async_dispose_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_eval_module(
        port_: i64,
        wrapper: usize,
        module_id: usize,
    ) {
        wire__crate__api__deno_async__deno_async_eval_module_impl(port_, wrapper, module_id)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_get_memory_usage(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__deno_async__deno_async_get_memory_usage_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_interrupt(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__deno_async__deno_async_interrupt_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_listen(
        port_: i64,
        wrapper: usize,
        events: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__deno_async__deno_async_listen_impl(port_, wrapper, events)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_set_sys_module(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
        evaluate: bool,
    ) {
        wire__crate__api__deno_async__deno_async_set_sys_module_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            evaluate,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_snapshot(
        port_: i64,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__deno_async__deno_async_snapshot_impl(port_, module_name, module_code)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_sys_to_js_binary(
        port_: i64,
        wrapper: usize,
        data: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__deno_async__deno_async_sys_to_js_binary_impl(port_, wrapper, data)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_async_sys_to_js_json(
        port_: i64,
        wrapper: usize,
        data: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__deno_async__deno_async_sys_to_js_json_impl(port_, wrapper, data)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_get_snapshot(
        port_: i64,
    ) {
        wire__crate__api__deno_async__deno_get_snapshot_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_remove_snapshot(
        port_: i64,
    ) {
        wire__crate__api__deno_async__deno_remove_snapshot_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_set_snapshot(
        port_: i64,
        snapshot: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__deno_async__deno_set_snapshot_impl(port_, snapshot)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__deno_async__deno_sync_eval_code(
        port_: i64,
        wrapper: usize,
        code: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__deno_async__deno_sync_eval_code_impl(port_, wrapper, code)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__minimal__init_app(port_: i64) {
        wire__crate__api__minimal__init_app_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_add_module_bytecode(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_bytecode: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_add_module_bytecode_impl(
            port_,
            wrapper,
            module_name,
            module_bytecode,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_add_module_code(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_add_module_code_impl(
            port_,
            wrapper,
            module_name,
            module_code,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_compile(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_compile_impl(
            port_,
            wrapper,
            module_name,
            module_code,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_create(
        port_: i64,
        memory_limit: *mut usize,
        max_stack_size: *mut usize,
        enable_interrupt: *mut bool,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_create_impl(
            port_,
            memory_limit,
            max_stack_size,
            enable_interrupt,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_dispose(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_dispose_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_eval_code(
        port_: i64,
        wrapper: usize,
        code: *mut wire_cst_list_prim_u_8_strict,
        backtrace_barrier: bool,
        global: bool,
        promise: bool,
        strict: bool,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_eval_code_impl(
            port_,
            wrapper,
            code,
            backtrace_barrier,
            global,
            promise,
            strict,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_eval_module(
        port_: i64,
        wrapper: usize,
        module_bytes: *mut wire_cst_list_prim_u_8_loose,
        module_name: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_eval_module_impl(
            port_,
            wrapper,
            module_bytes,
            module_name,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_execute_idle(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_execute_idle_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_execute_pending(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_execute_pending_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_get_memory_usage(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_get_memory_usage_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_interrupt(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_interrupt_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_is_pending(
        port_: i64,
        wrapper: usize,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_is_pending_impl(port_, wrapper)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_listen(
        port_: i64,
        wrapper: usize,
        events: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_listen_impl(port_, wrapper, events)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_set_global_value(
        port_: i64,
        wrapper: usize,
        name: *mut wire_cst_list_prim_u_8_strict,
        value: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_set_global_value_impl(
            port_, wrapper, name, value,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_set_sys_module(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        module_code: *mut wire_cst_list_prim_u_8_strict,
        module_bytecode: *mut wire_cst_list_prim_u_8_strict,
        js_to_sys_name: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_set_sys_module_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            module_bytecode,
            js_to_sys_name,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_sys_to_js_binary(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        trigger_name: *mut wire_cst_list_prim_u_8_strict,
        data: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_sys_to_js_binary_impl(
            port_,
            wrapper,
            module_name,
            trigger_name,
            data,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_wire__crate__api__quickjs_async__quickjs_async_sys_to_js_json(
        port_: i64,
        wrapper: usize,
        module_name: *mut wire_cst_list_prim_u_8_strict,
        trigger_name: *mut wire_cst_list_prim_u_8_strict,
        data: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_sys_to_js_json_impl(
            port_,
            wrapper,
            module_name,
            trigger_name,
            data,
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcWrapper(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Wrapper >>>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcWrapper(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Wrapper >>>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_cst_new_box_autoadd_record_usize_string(
    ) -> *mut wire_cst_record_usize_string {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_record_usize_string::new_with_null_ptr(),
        )
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_cst_new_box_autoadd_usize(
        value: usize,
    ) -> *mut usize {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_cst_new_list_prim_u_8_loose(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_loose {
        let ans = wire_cst_list_prim_u_8_loose {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn frbgen_denarius_runtime_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_custom_data {
        binary: *mut wire_cst_list_prim_u_8_strict,
        json: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_custom_memory_usage {
        malloc_size: i64,
        memory_used_size: i64,
        count_interrupt_calls: u64,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_deno_custom_data {
        binary: *mut wire_cst_list_prim_u_8_strict,
        json: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_deno_memory_usage {
        total_available_size: usize,
        total_physical_size: usize,
        total_heap_size: usize,
        used_heap_size: usize,
        external_memory: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_loose {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_usize_string {
        field0: usize,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.2.0.

    // Section: imports

    use super::*;
    use crate::api::deno_async::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::quickjs_commons::CustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::quickjs_commons::CustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self)
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::deno_commons::DenoCustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::deno_commons::DenoCustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self)
        }
    }
    impl CstDecode<String> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self
        }
    }
    impl CstDecode<crate::api::quickjs_commons::CustomData>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::quickjs_commons::CustomData {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::api::quickjs_commons::CustomData {
                binary: self_.get(0).cst_decode(),
                json: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::quickjs_commons::CustomMemoryUsage>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::quickjs_commons::CustomMemoryUsage {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            crate::api::quickjs_commons::CustomMemoryUsage {
                malloc_size: self_.get(0).cst_decode(),
                memory_used_size: self_.get(1).cst_decode(),
                count_interrupt_calls: self_.get(2).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::deno_commons::DenoCustomData>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::deno_commons::DenoCustomData {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::api::deno_commons::DenoCustomData {
                binary: self_.get(0).cst_decode(),
                json: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::deno_commons::DenoMemoryUsage>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::deno_commons::DenoMemoryUsage {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                5,
                "Expected 5 elements, got {}",
                self_.length()
            );
            crate::api::deno_commons::DenoMemoryUsage {
                total_available_size: self_.get(0).cst_decode(),
                total_physical_size: self_.get(1).cst_decode(),
                total_heap_size: self_.get(2).cst_decode(),
                used_heap_size: self_.get(3).cst_decode(),
                external_memory: self_.get(4).cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<u8>> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl CstDecode<Option<String>> for Option<String> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Option<String> {
            self.map(CstDecode::cst_decode)
        }
    }
    impl CstDecode<Option<Vec<u8>>> for Option<Box<[u8]>> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Option<Vec<u8>> {
            self.map(CstDecode::cst_decode)
        }
    }
    impl CstDecode<(usize, String)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (usize, String) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<Arc<Wrapper>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Arc<Wrapper> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc<Wrapper>>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::quickjs_commons::CustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::quickjs_commons::CustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl
        CstDecode<
            StreamSink<
                crate::api::deno_commons::DenoCustomData,
                flutter_rust_bridge::for_generated::DcoCodec,
            >,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<
            crate::api::deno_commons::DenoCustomData,
            flutter_rust_bridge::for_generated::DcoCodec,
        > {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            self.is_truthy()
        }
    }
    impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i64 {
            ::std::convert::TryInto::<i64>::try_into(self).unwrap() as _
        }
    }
    impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
                .to_vec()
                .into()
        }
    }
    impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u64 {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }
    impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_add_module_code(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_code: String,
        is_main: bool,
        evaluate: bool,
    ) {
        wire__crate__api__deno_async__deno_async_add_module_code_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            is_main,
            evaluate,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_call_function(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        function: String,
    ) {
        wire__crate__api__deno_async__deno_async_call_function_impl(
            port_, wrapper, module, function,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_create(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__deno_async__deno_async_create_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_dispose(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__deno_async__deno_async_dispose_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_eval_module(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_id: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__deno_async__deno_async_eval_module_impl(port_, wrapper, module_id)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_get_memory_usage(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__deno_async__deno_async_get_memory_usage_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_interrupt(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__deno_async__deno_async_interrupt_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_listen(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        events: String,
    ) {
        wire__crate__api__deno_async__deno_async_listen_impl(port_, wrapper, events)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_set_sys_module(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_code: Option<String>,
        evaluate: bool,
    ) {
        wire__crate__api__deno_async__deno_async_set_sys_module_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            evaluate,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_snapshot(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        module_name: String,
        module_code: String,
    ) {
        wire__crate__api__deno_async__deno_async_snapshot_impl(port_, module_name, module_code)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_sys_to_js_binary(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        data: Box<[u8]>,
    ) {
        wire__crate__api__deno_async__deno_async_sys_to_js_binary_impl(port_, wrapper, data)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_async_sys_to_js_json(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        data: String,
    ) {
        wire__crate__api__deno_async__deno_async_sys_to_js_json_impl(port_, wrapper, data)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_get_snapshot(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__deno_async__deno_get_snapshot_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_remove_snapshot(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__deno_async__deno_remove_snapshot_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_set_snapshot(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        snapshot: Box<[u8]>,
    ) {
        wire__crate__api__deno_async__deno_set_snapshot_impl(port_, snapshot)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__deno_async__deno_sync_eval_code(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        code: String,
    ) {
        wire__crate__api__deno_async__deno_sync_eval_code_impl(port_, wrapper, code)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__minimal__init_app(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__minimal__init_app_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_add_module_bytecode(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_bytecode: Box<[u8]>,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_add_module_bytecode_impl(
            port_,
            wrapper,
            module_name,
            module_bytecode,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_add_module_code(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_code: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_add_module_code_impl(
            port_,
            wrapper,
            module_name,
            module_code,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_compile(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_code: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_compile_impl(
            port_,
            wrapper,
            module_name,
            module_code,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_create(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        memory_limit: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        max_stack_size: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        enable_interrupt: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_create_impl(
            port_,
            memory_limit,
            max_stack_size,
            enable_interrupt,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_dispose(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_dispose_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_eval_code(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        code: String,
        backtrace_barrier: bool,
        global: bool,
        promise: bool,
        strict: bool,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_eval_code_impl(
            port_,
            wrapper,
            code,
            backtrace_barrier,
            global,
            promise,
            strict,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_eval_module(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_bytes: Box<[u8]>,
        module_name: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_eval_module_impl(
            port_,
            wrapper,
            module_bytes,
            module_name,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_execute_idle(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_execute_idle_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_execute_pending(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_execute_pending_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_get_memory_usage(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_get_memory_usage_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_interrupt(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_interrupt_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_is_pending(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_is_pending_impl(port_, wrapper)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_listen(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        events: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_listen_impl(port_, wrapper, events)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_set_global_value(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        name: String,
        value: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_set_global_value_impl(
            port_, wrapper, name, value,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_set_sys_module(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        module_code: Option<String>,
        module_bytecode: Option<Box<[u8]>>,
        js_to_sys_name: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_set_sys_module_impl(
            port_,
            wrapper,
            module_name,
            module_code,
            module_bytecode,
            js_to_sys_name,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_sys_to_js_binary(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        trigger_name: String,
        data: Box<[u8]>,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_sys_to_js_binary_impl(
            port_,
            wrapper,
            module_name,
            trigger_name,
            data,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__quickjs_async__quickjs_async_sys_to_js_json(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        wrapper: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        module_name: String,
        trigger_name: String,
        data: String,
    ) {
        wire__crate__api__quickjs_async__quickjs_async_sys_to_js_json_impl(
            port_,
            wrapper,
            module_name,
            trigger_name,
            data,
        )
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcWrapper(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Wrapper >>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcWrapper(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Wrapper >>>::decrement_strong_count(ptr as _);
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
